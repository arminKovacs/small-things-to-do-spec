openapi: '3.0.0'
info:
  version: '0.0.1'
  title: 'small-things-to-do api specs'
  description: 'API specifications for pet project small-things-to-do'
servers:
  - url: 'https://localhost:3001/api'
    description: 'Local host server for api'
tags:
  - name: Todos
    description: Endpoints for managing and returning todo items
  - name: Authentication
    description: Endpoints for authentication management
  - name: Users
    description: Endpoints for managing user data *TBD*

paths:
  /todos/{todoId}:
    get:
      summary: 'Returns a single todo item'
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/todoId'
      responses:
        200:
          description: 'Todo item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/GetTodoResponse'
        400:
            $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: 'Error message if todo item does not exist'
        500:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: 'Updates a specific todo item'
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/todoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo-base'
            examples:
              CreateTodoBody:
                $ref: '#/components/examples/CreateTodoBody'
      responses:
        200:
          description: 'Updated todo item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/GetTodoResponse'
        400:
            $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: 'Error message if todo item does not exist'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      summary: 'Deletes a specific todo item'
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/todoId'
      responses:
        204:
          description: 'Simple message for successfull deletion'
        400:
            $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: 'Error message if todo item does not exist'
        500:
          $ref: '#/components/responses/InternalError'

  /todos:
    get:
      summary: 'Lists the users todos. The user id is recovered from the jwt token'
      security:
        - bearerAuth: []
      tags:
        - Todos
      responses:
        200:
          description: 'List of todos'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
              examples:
                ListTodosResponse:
                  $ref: '#/components/examples/ListTodosResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalError'
    post:
      summary: 'Create new todo item'
      security:
        - bearerAuth: []
      tags:
        - Todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo-base'
            examples:
              CreateTodoBody:
                $ref: '#/components/examples/CreateTodoBody'
      responses:
        201:
          description: 'Returns the created todo item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/GetTodoResponse'
        400:
            $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/ConflictError'
        500:
          $ref: '#/components/responses/InternalError'

  /signup:
    post:
      summary: 'Create a new user'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-base'
            examples:
              CreateUserBody:
                $ref: '#/components/examples/CreateUserBody'
      responses:
        201:
          description: 'Returns the created JWT tokens for the user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/TokensResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError'

  /signin:
    post:
      summary: 'Signs in the user'
      security:
        - bearerAuth: []
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-base'
            examples:
              CreateUserBody:
                $ref: '#/components/examples/CreateUserBody'
      responses:
        200:
          description: 'Returns JWT tokens for the user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/TokensResponse'
        404:
          description: 'Error message if user does not exist'
        400:
          $ref: '#/components/responses/BadRequestError'
        500:
          $ref: '#/components/responses/InternalError'

  /logout:
    get:
      summary: 'Logs the user out and deletes the user refresh token from the database'
      security:
        - bearerAuth: []
      tags:
        - Authentication
      responses:
        200:
          description: 'Returns a success message'
        404:
          description: 'Error message if user is not found'
        500:
          $ref: '#/components/responses/InternalError'

  /refresh:
    get:
      summary: 'Refreshes the user tokens when called for user in tokens data'
      security:
        - refreshAuth: []
      tags:
        - Authentication
      responses:
        200:
          description: 'Returns new access and refresh tokens'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensResponse'
              examples:
                GetTodoResponse:
                  $ref: '#/components/examples/TokensResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: 'Forbidden error on refresh token or user validation issue'
        500:
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    todoId:
      name: todoId
      in: path
      required: true
      schema:
        type: string

  schemas:
    Todo-base:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 30
        description:
          type: string
          maxLength: 300
        dueDate:
            type: string
      required:
        - title
        - dueDate
    User-base:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          maxLength: 50
      required:
        - username
        - password
    Todo:
      allOf:
        - $ref: '#/components/schemas/Todo-base'
        - type: object
          properties:
            id:
              type: string
            creationDate:
              type: string
            owner:
              type: string
              format: email
          required:
            - id
            - title
            - creationDate
            - dueDate
            - owner
    User:
      allOf:
        - $ref: '#/components/schemas/User-base'
        - type: object
          properties:
            id:
              type: string
            refreshToken:
              type: string
          required:
            - id
            - username
            - password
            - refreshToken
    TokensResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token for authentication
        refresh_token:
          type: string
          description: JWT refresh token for refreshing authentication token because of quick expiration time

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalError:
      description: Internal server error. Usually Mongo database error
    ConflictError:
      description: Server error from conflict. Item already created with this title or due date before creation date
    BadRequestError:
      description: Created data already exists (user or todo) or schema validation failed for request

  examples:
    GetTodoResponse:
      value: &GetTodoResponse
        id: 636a5fed17e22119f36801db
        title: Wash dishes
        description: Remember to wash the dishes before the guests arrive
        owner: johntest@email.com
        dueDate: 2022-12-05T14:48:00.000Z
        creatioinDate: 2022-12-01T14:48:00.000Z
    TokensResponse:
      value: &TokensResponse
        access_token: jwt.access.token
        refresh_token: jwt.refresh.token
    ListTodosResponse:
      value:
        - *GetTodoResponse
    CreateTodoBody:
      value:
        title: Wash dishes
        description: Remember to wash the dishes before the guests arrive
        dueDate: 2022-12-05T14:48:00.000Z    
    CreateUserBody:
      value:
        username: test@email.com
        password: pa$$w0rd
        